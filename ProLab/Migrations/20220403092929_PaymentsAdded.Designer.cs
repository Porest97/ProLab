// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProLab.Data;

#nullable disable

namespace ProLab.Migrations
{
    [DbContext(typeof(ProLabContext))]
    [Migration("20220403092929_PaymentsAdded")]
    partial class PaymentsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProLab.ImageUpload.Models.ImageModel", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<int?>("HockeyGameId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ImageId");

                    b.HasIndex("HockeyGameId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ActivityPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityPostStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeEnded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthActivityId")
                        .HasColumnType("int");

                    b.Property<int>("HoursSpent")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinutesSpent")
                        .HasColumnType("int");

                    b.Property<int>("SecondsSpent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPostStatusId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("HealthActivityId");

                    b.ToTable("ActivityPosts");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ActivityPostStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActivityPostStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityPostStatuses");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Aktivitet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AktivitetsBeskrivning")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aktivitet");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Arena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArenaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArenaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Arena");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CleverServicePayments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CSPStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CSPStatusId");

                    b.HasIndex("ClubId");

                    b.ToTable("CleverServicePayments");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRoleId");

                    b.HasIndex("CompanyStatusId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CompanyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyRoles");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CompanyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyStatuses");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CSPStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CSPStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CSPStatus");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CupKvitto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Allowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GameFee1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee10")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee4")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee5")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee6")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee7")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee8")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFee9")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("HockeyGameId")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId1")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId2")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId3")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId4")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId5")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId6")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId8")
                        .HasColumnType("int");

                    b.Property<int?>("HockeyGameId9")
                        .HasColumnType("int");

                    b.Property<decimal>("Km")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LateGameStart")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LostErnings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefRecStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TravelExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelSalarySupplement")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HockeyGameId");

                    b.HasIndex("HockeyGameId1");

                    b.HasIndex("HockeyGameId2");

                    b.HasIndex("HockeyGameId3");

                    b.HasIndex("HockeyGameId4");

                    b.HasIndex("HockeyGameId5");

                    b.HasIndex("HockeyGameId6");

                    b.HasIndex("HockeyGameId8");

                    b.HasIndex("HockeyGameId9");

                    b.HasIndex("RefRecStatusId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TournamentId");

                    b.ToTable("CupKvitto");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.FoodDiaryPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Calcium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Carbohydrates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cholesterol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fibers")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Iron")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Meal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonounsaturatedFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PolyunsaturatedFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Protein")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaturatedFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sodium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sugar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminC")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FoodDiaryPosts");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Audience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GameDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Round")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TSMNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.GameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GameCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameCategory");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GameStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameStatus");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GameTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameType");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.HealthActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HealthActivityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KcalPerHour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HealthActivities");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.HockeyGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArenaId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GameCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GameDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefereeId")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId1")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId2")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId3")
                        .HasColumnType("int");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("TSMNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("ClubId");

                    b.HasIndex("ClubId1");

                    b.HasIndex("GameCategoryId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("RefereeId1");

                    b.HasIndex("RefereeId2");

                    b.HasIndex("RefereeId3");

                    b.HasIndex("SeriesId");

                    b.ToTable("HockeyGame");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.MDProtocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BodyTemp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cough")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diarrhea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilySymtoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Headache")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MuscleAches")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NasalCongestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nausea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSymptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSymptomsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefereeId")
                        .HasColumnType("int");

                    b.Property<string>("SoreThroat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.ToTable("MDProtocol");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.OfficialsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BoothDoor1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoothDoor2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscJockey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinesMan1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinesMan2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchClock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchProtocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referee1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referee2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShotStatistics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supervisor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfficialsGroups");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.PlanPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AktivitetId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AktivitetId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PlanPost");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("BudgetHours")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Ended")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Outcome")
                        .HasColumnType("float");

                    b.Property<DateTime>("PlanedEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlanedStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ProjektNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime2");

                    b.Property<double>("UsedHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStatusId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ProjectPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeDone")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimePlaned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HourPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LabourCostActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MtrCostActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProjectPostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectPostStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TimeActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TimeEstimate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostEstimate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPostStatusId");

                    b.ToTable("ProjectPosts");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ProjectPostStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ProjectPostStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectPostStatus");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ProjectStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwishNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Referee");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.RefFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UDZ")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("RefFees");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.RefReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AllowanceHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AllowanceHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AllowanceLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AllowanceLD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DescriptionOthersHD1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOthersHD2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOthersLD1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionOthersLD2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GameFeeHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFeeHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFeeLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GameFeeLD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("HockeyGameId")
                        .HasColumnType("int");

                    b.Property<decimal>("KmHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KmHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KmLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KmLD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LostErningsHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LostErningsHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LostErningsLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LostErningsLD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherLD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RefRecStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCostHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostHalfHockeyGame")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostHockeyGame")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCostLD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelExpensesHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelExpensesHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelExpensesLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelExpensesLD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelSalarySupplementHD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelSalarySupplementHD2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelSalarySupplementLD1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TravelSalarySupplementLD2")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HockeyGameId");

                    b.HasIndex("RefRecStatusId");

                    b.ToTable("RefReceipt");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.RefRecStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RefRecStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefRecStatus");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesPlayTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.StatsPorest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("EventDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HockeyDay")
                        .HasColumnType("int");

                    b.Property<decimal?>("WorkoutHours")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("StatsPorest");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TournamentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TournamentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentCategoryId");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.TournamentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TournamentCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TournamentCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentCategory");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.TSMGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArenaId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GameDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId1")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId2")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId3")
                        .HasColumnType("int");

                    b.Property<string>("TSMNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TSMSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("ClubId");

                    b.HasIndex("ClubId1");

                    b.HasIndex("RefereeId");

                    b.HasIndex("RefereeId1");

                    b.HasIndex("RefereeId2");

                    b.HasIndex("RefereeId3");

                    b.HasIndex("TSMSeriesId");

                    b.ToTable("TSMGames");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.TSMHocekyGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateChanged")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GameDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameStatusId")
                        .HasColumnType("int");

                    b.Property<string>("HD1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HD2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LD1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LD2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Round")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supervisor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameStatusId");

                    b.ToTable("TSMHockeyGame");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.TSMSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TSMSeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TSMSeries");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.UploadModel", b =>
                {
                    b.Property<int>("UploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UploadId"), 1L, 1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UploadName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UploadId");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("ProLab.TheOneApp.Models.DataModels.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Alcohol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ArachidicAcidC200")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ArachidonicAcidC204")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Ash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BetaCarotene")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Calcium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Carbohydrates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cholesterol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DHAC226")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DPAC225")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Disaccharides")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EPAC205")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EnergyKJ")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EnergyKcal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FattyAcid40100")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fibers")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Folate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FoodDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Iodine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Iron")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LauricAcidC120")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LinoleAcidC182")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LinolenicAcidC183")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Magnesium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monosaccharides")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MyristicAcidC140")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Niacin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NiacinEquivalents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OleicAcidC181")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PalmOleicAcidC161")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PalmiticAcidC160")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Phosphorus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Protein")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Retinol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Riboflavin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Salt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Selenium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sodium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StearinAcid180")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sucrose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sugars")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Thiamine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalMonounsaturatedFattyAcids")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPolyunsaturatedFattyAcids")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSaturatedFattyAcids")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB12")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB6")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminK")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WasteProcent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Water")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WholeGrainsTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Zink")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("ProLab.TheOneApp.Models.DataModels.FoodRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodRatingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodRatingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodRatingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodRatings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProLab.ImageUpload.Models.ImageModel", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame")
                        .WithMany()
                        .HasForeignKey("HockeyGameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HockeyGame");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ActivityPost", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ActivityPostStatus", "ActivityPostStatus")
                        .WithMany()
                        .HasForeignKey("ActivityPostStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HealthActivity", "HealthActivity")
                        .WithMany()
                        .HasForeignKey("HealthActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityPostStatus");

                    b.Navigation("HealthActivity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CleverServicePayments", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.CSPStatus", "CSPStatus")
                        .WithMany()
                        .HasForeignKey("CSPStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CSPStatus");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Company", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.CompanyRole", "CompanyRole")
                        .WithMany()
                        .HasForeignKey("CompanyRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.CompanyStatus", "CompanyStatus")
                        .WithMany()
                        .HasForeignKey("CompanyStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CompanyRole");

                    b.Navigation("CompanyStatus");

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.CupKvitto", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame1")
                        .WithMany()
                        .HasForeignKey("HockeyGameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame2")
                        .WithMany()
                        .HasForeignKey("HockeyGameId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame3")
                        .WithMany()
                        .HasForeignKey("HockeyGameId2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame4")
                        .WithMany()
                        .HasForeignKey("HockeyGameId3")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame5")
                        .WithMany()
                        .HasForeignKey("HockeyGameId4")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame6")
                        .WithMany()
                        .HasForeignKey("HockeyGameId5")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame7")
                        .WithMany()
                        .HasForeignKey("HockeyGameId6")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame9")
                        .WithMany()
                        .HasForeignKey("HockeyGameId8")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame10")
                        .WithMany()
                        .HasForeignKey("HockeyGameId9")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.RefRecStatus", "Status")
                        .WithMany()
                        .HasForeignKey("RefRecStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HockeyGame1");

                    b.Navigation("HockeyGame10");

                    b.Navigation("HockeyGame2");

                    b.Navigation("HockeyGame3");

                    b.Navigation("HockeyGame4");

                    b.Navigation("HockeyGame5");

                    b.Navigation("HockeyGame6");

                    b.Navigation("HockeyGame7");

                    b.Navigation("HockeyGame9");

                    b.Navigation("Referee");

                    b.Navigation("Status");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Employee", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.FoodDiaryPost", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.HockeyGame", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Club", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Club", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("ClubId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.GameCategory", "GameCategory")
                        .WithMany()
                        .HasForeignKey("GameCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "HD1")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "HD2")
                        .WithMany()
                        .HasForeignKey("RefereeId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "LD1")
                        .WithMany()
                        .HasForeignKey("RefereeId2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "LD2")
                        .WithMany()
                        .HasForeignKey("RefereeId3")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Arena");

                    b.Navigation("AwayTeam");

                    b.Navigation("GameCategory");

                    b.Navigation("GameStatus");

                    b.Navigation("GameType");

                    b.Navigation("HD1");

                    b.Navigation("HD2");

                    b.Navigation("HomeTeam");

                    b.Navigation("LD1");

                    b.Navigation("LD2");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.MDProtocol", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.PlanPost", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.Aktivitet", "Aktivitet")
                        .WithMany()
                        .HasForeignKey("AktivitetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Aktivitet");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Project", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ProjectPostStatus", "Status")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.ProjectPost", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ProjectPostStatus", "Status")
                        .WithMany()
                        .HasForeignKey("ProjectPostStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Referee", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.RefReceipt", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.HockeyGame", "HockeyGame")
                        .WithMany()
                        .HasForeignKey("HockeyGameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.RefRecStatus", "RefRecStatus")
                        .WithMany()
                        .HasForeignKey("RefRecStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HockeyGame");

                    b.Navigation("RefRecStatus");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.Tournament", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.TournamentCategory", "TournamentCategory")
                        .WithMany()
                        .HasForeignKey("TournamentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TournamentCategory");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.TSMGame", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Club", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Club", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("ClubId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "HD1")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "HD2")
                        .WithMany()
                        .HasForeignKey("RefereeId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "LD1")
                        .WithMany()
                        .HasForeignKey("RefereeId2")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.Referee", "LD2")
                        .WithMany()
                        .HasForeignKey("RefereeId3")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProLab.Models.DataModels.TSMSeries", "TSMSeries")
                        .WithMany()
                        .HasForeignKey("TSMSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Arena");

                    b.Navigation("AwayTeam");

                    b.Navigation("HD1");

                    b.Navigation("HD2");

                    b.Navigation("HomeTeam");

                    b.Navigation("LD1");

                    b.Navigation("LD2");

                    b.Navigation("TSMSeries");
                });

            modelBuilder.Entity("ProLab.Models.DataModels.TSMHocekyGame", b =>
                {
                    b.HasOne("ProLab.Models.DataModels.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GameStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
